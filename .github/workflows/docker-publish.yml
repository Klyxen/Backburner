name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Required for pushing tags

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Check if specific files or directories were modified
      - name: Determine if changes affect Docker build
        id: changes_check
        run: |
          git fetch --no-tags --prune --depth=2 origin main
          changes=$(git diff --name-only HEAD^ HEAD)
          echo "Changes detected:"
          echo "$changes"
          
          # Check for changes in the backburner folder or Dockerfile
          if echo "$changes" | grep -E '^(backburner/|Dockerfile)'; then
            echo "Relevant changes detected."
            echo "SHOULD_BUILD=true" >> $GITHUB_ENV
          else
            echo "No relevant changes detected. Skipping build."
            echo "SHOULD_BUILD=false" >> $GITHUB_ENV
          fi

      # Step 3: Exit early if no relevant changes
      - name: Exit if no relevant changes
        if: env.SHOULD_BUILD == 'false'
        run: echo "Exiting because no relevant changes were detected."

      # Step 4: Get the latest tag version or initialize v1.0
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0")
          echo "Latest tag: $latest_tag"
          if [ "$latest_tag" = "v0.0" ]; then
            echo "v1.0" > next_tag.txt
          else
            major=$(echo $latest_tag | cut -d. -f1 | cut -dv -f2)
            minor=$(echo $latest_tag | cut -d. -f2)
            if [ "$minor" -ge 9 ]; then
              next_major=$((major + 1))
              echo "v${next_major}.0" > next_tag.txt
            else
              next_minor=$((minor + 1))
              echo "v${major}.${next_minor}" > next_tag.txt
            fi
          fi
          cat next_tag.txt

      # Step 5: Delete old Docker image tag from Docker Hub
      - name: Delete old Docker image tag from Docker Hub
        if: ${{ steps.get_tag.outputs.latest_tag != 'v0.0' }}
        run: |
          echo "Attempting to delete old Docker image tag: ${{ steps.get_tag.outputs.latest_tag }}"
          curl -X DELETE \
            -u ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }} \
            "https://hub.docker.com/v2/repositories/klyxenn/backburner/tags/${{ steps.get_tag.outputs.latest_tag }}/"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Delete old Git tag
      - name: Delete old tags
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          if [ -n "$latest_tag" ]; then
            echo "Deleting old tag: $latest_tag"
            git push --delete origin $latest_tag
          else
            echo "No old tags to delete."
          fi

      # Step 7: Set the new version as an environment variable
      - name: Set next tag as environment variable
        run: echo "NEXT_TAG=$(cat next_tag.txt)" >> $GITHUB_ENV

      # Step 8: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 9: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 10: Build and push the Docker image with the new version tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            klyxenn/backburner:${{ env.NEXT_TAG }}
            klyxenn/backburner:latest

      # Step 11: Create a new Git tag
      - name: Tag the new version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ env.NEXT_TAG }}
          git push origin ${{ env.NEXT_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
